/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MintNFTInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "canMint(uint256,uint256[24])": FunctionFragment;
    "changeMintLocked(uint256,bool)": FunctionFragment;
    "changeNonTransferable(uint256,bool)": FunctionFragment;
    "dropNFTs(uint256,address[])": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getEventIdOfTokenId(uint256)": FunctionFragment;
    "getGroupIdByEvent(uint256)": FunctionFragment;
    "getIsMintLocked(uint256)": FunctionFragment;
    "getIsNonTransferable(uint256)": FunctionFragment;
    "getNFTAttributeRecordsByEventId(uint256,uint256,uint256)": FunctionFragment;
    "getNFTHoldersByEvent(uint256)": FunctionFragment;
    "getNFTHoldersByEventGroup(uint256)": FunctionFragment;
    "getRemainingNFTCount(uint256)": FunctionFragment;
    "getTokenIdsByEvent(uint256)": FunctionFragment;
    "getTokensOfOwner(address)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isHoldingEventNFTByAddress(address,uint256)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "mintParticipateNFT(uint256,uint256,uint256[24])": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "ownerOfTokens(uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetSecretPhrase(uint256,bytes32)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setEventInfo(uint256,uint256,bytes32,tuple[])": FunctionFragment;
    "setEventManagerAddr(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "canMint",
    values: [
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMintLocked",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeNonTransferable",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "dropNFTs",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventIdOfTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupIdByEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsMintLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsNonTransferable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTAttributeRecordsByEventId",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTHoldersByEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTHoldersByEventGroup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingNFTCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIdsByEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensOfOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isHoldingEventNFTByAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintParticipateNFT",
    values: [
      BigNumberish,
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfTokens",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetSecretPhrase",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventInfo",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      { metaDataURL: string; requiredParticipateCount: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventManagerAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMintLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeNonTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dropNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventIdOfTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupIdByEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsMintLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsNonTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTAttributeRecordsByEventId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTHoldersByEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTHoldersByEventGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingNFTCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIdsByEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isHoldingEventNFTByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintParticipateNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetSecretPhrase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventManagerAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "DroppedNFTs(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MintLocked(uint256,bool)": EventFragment;
    "MintedNFTAttributeURL(address,string)": EventFragment;
    "NonTransferable(uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ResetSecretPhrase(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DroppedNFTs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintedNFTAttributeURL"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonTransferable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetSecretPhrase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type DroppedNFTsEvent = TypedEvent<
  [string, BigNumber] & { executor: string; eventId: BigNumber }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type MintLockedEvent = TypedEvent<
  [BigNumber, boolean] & { eventId: BigNumber; isLocked: boolean }
>;

export type MintedNFTAttributeURLEvent = TypedEvent<
  [string, string] & { holder: string; url: string }
>;

export type NonTransferableEvent = TypedEvent<
  [BigNumber, boolean] & { eventId: BigNumber; isNonTransferable: boolean }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ResetSecretPhraseEvent = TypedEvent<
  [string, BigNumber] & { executor: string; eventId: BigNumber }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class MintNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MintNFTInterface;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canMint(
      _eventId: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeMintLocked(
      _eventId: BigNumberish,
      _locked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeNonTransferable(
      _eventId: BigNumberish,
      _isNonTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dropNFTs(
      _eventId: BigNumberish,
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEventIdOfTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGroupIdByEvent(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIsMintLocked(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsNonTransferable(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNFTAttributeRecordsByEventId(
      _eventId: BigNumberish,
      _limit: BigNumberish,
      _offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber] & {
          metaDataURL: string;
          requiredParticipateCount: BigNumber;
        })[]
      ]
    >;

    getNFTHoldersByEvent(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { holderAddress: string; tokenId: BigNumber })[]]
    >;

    getNFTHoldersByEventGroup(
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber] & {
          holderAddress: string;
          eventId: BigNumber;
          tokenId: BigNumber;
        })[]
      ]
    >;

    getRemainingNFTCount(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenIdsByEvent(
      eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTokensOfOwner(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, string] & {
          eventId: BigNumber;
          tokenId: BigNumber;
          tokenUri: string;
        })[]
      ]
    >;

    initialize(
      _owner: string,
      _trustedForwarder: string,
      _secretPhraseVerifierAddr: string,
      _operationControllerAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isHoldingEventNFTByAddress(
      _addr: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintParticipateNFT(
      _groupId: BigNumberish,
      _eventId: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerOfTokens(
      _tokenIdArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { holderAddress: string; tokenId: BigNumber })[]]
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetSecretPhrase(
      _eventId: BigNumberish,
      _secretPhrase: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEventInfo(
      _eventId: BigNumberish,
      _mintLimit: BigNumberish,
      _secretPhrase: BytesLike,
      attributes: {
        metaDataURL: string;
        requiredParticipateCount: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEventManagerAddr(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canMint(
    _eventId: BigNumberish,
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<boolean>;

  changeMintLocked(
    _eventId: BigNumberish,
    _locked: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeNonTransferable(
    _eventId: BigNumberish,
    _isNonTransferable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dropNFTs(
    _eventId: BigNumberish,
    _addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEventIdOfTokenId(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGroupIdByEvent(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIsMintLocked(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsNonTransferable(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNFTAttributeRecordsByEventId(
    _eventId: BigNumberish,
    _limit: BigNumberish,
    _offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber] & {
      metaDataURL: string;
      requiredParticipateCount: BigNumber;
    })[]
  >;

  getNFTHoldersByEvent(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber] & { holderAddress: string; tokenId: BigNumber })[]
  >;

  getNFTHoldersByEventGroup(
    _groupId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber] & {
      holderAddress: string;
      eventId: BigNumber;
      tokenId: BigNumber;
    })[]
  >;

  getRemainingNFTCount(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenIdsByEvent(
    eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTokensOfOwner(
    _address: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, string] & {
      eventId: BigNumber;
      tokenId: BigNumber;
      tokenUri: string;
    })[]
  >;

  initialize(
    _owner: string,
    _trustedForwarder: string,
    _secretPhraseVerifierAddr: string,
    _operationControllerAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isHoldingEventNFTByAddress(
    _addr: string,
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintParticipateNFT(
    _groupId: BigNumberish,
    _eventId: BigNumberish,
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ownerOfTokens(
    _tokenIdArray: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber] & { holderAddress: string; tokenId: BigNumber })[]
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetSecretPhrase(
    _eventId: BigNumberish,
    _secretPhrase: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEventInfo(
    _eventId: BigNumberish,
    _mintLimit: BigNumberish,
    _secretPhrase: BytesLike,
    attributes: {
      metaDataURL: string;
      requiredParticipateCount: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEventManagerAddr(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    canMint(
      _eventId: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeMintLocked(
      _eventId: BigNumberish,
      _locked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    changeNonTransferable(
      _eventId: BigNumberish,
      _isNonTransferable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    dropNFTs(
      _eventId: BigNumberish,
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEventIdOfTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupIdByEvent(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsMintLocked(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsNonTransferable(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNFTAttributeRecordsByEventId(
      _eventId: BigNumberish,
      _limit: BigNumberish,
      _offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & {
        metaDataURL: string;
        requiredParticipateCount: BigNumber;
      })[]
    >;

    getNFTHoldersByEvent(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { holderAddress: string; tokenId: BigNumber })[]
    >;

    getNFTHoldersByEventGroup(
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber] & {
        holderAddress: string;
        eventId: BigNumber;
        tokenId: BigNumber;
      })[]
    >;

    getRemainingNFTCount(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIdsByEvent(
      eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTokensOfOwner(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, string] & {
        eventId: BigNumber;
        tokenId: BigNumber;
        tokenUri: string;
      })[]
    >;

    initialize(
      _owner: string,
      _trustedForwarder: string,
      _secretPhraseVerifierAddr: string,
      _operationControllerAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isHoldingEventNFTByAddress(
      _addr: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintParticipateNFT(
      _groupId: BigNumberish,
      _eventId: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ownerOfTokens(
      _tokenIdArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { holderAddress: string; tokenId: BigNumber })[]
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetSecretPhrase(
      _eventId: BigNumberish,
      _secretPhrase: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEventInfo(
      _eventId: BigNumberish,
      _mintLimit: BigNumberish,
      _secretPhrase: BytesLike,
      attributes: {
        metaDataURL: string;
        requiredParticipateCount: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setEventManagerAddr(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "DroppedNFTs(address,uint256)"(
      executor?: string | null,
      eventId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { executor: string; eventId: BigNumber }
    >;

    DroppedNFTs(
      executor?: string | null,
      eventId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { executor: string; eventId: BigNumber }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "MintLocked(uint256,bool)"(
      eventId?: BigNumberish | null,
      isLocked?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { eventId: BigNumber; isLocked: boolean }
    >;

    MintLocked(
      eventId?: BigNumberish | null,
      isLocked?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { eventId: BigNumber; isLocked: boolean }
    >;

    "MintedNFTAttributeURL(address,string)"(
      holder?: string | null,
      url?: null
    ): TypedEventFilter<[string, string], { holder: string; url: string }>;

    MintedNFTAttributeURL(
      holder?: string | null,
      url?: null
    ): TypedEventFilter<[string, string], { holder: string; url: string }>;

    "NonTransferable(uint256,bool)"(
      eventId?: BigNumberish | null,
      isNonTransferable?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { eventId: BigNumber; isNonTransferable: boolean }
    >;

    NonTransferable(
      eventId?: BigNumberish | null,
      isNonTransferable?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { eventId: BigNumber; isNonTransferable: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ResetSecretPhrase(address,uint256)"(
      executor?: string | null,
      eventId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { executor: string; eventId: BigNumber }
    >;

    ResetSecretPhrase(
      executor?: string | null,
      eventId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { executor: string; eventId: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canMint(
      _eventId: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeMintLocked(
      _eventId: BigNumberish,
      _locked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeNonTransferable(
      _eventId: BigNumberish,
      _isNonTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dropNFTs(
      _eventId: BigNumberish,
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventIdOfTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupIdByEvent(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsMintLocked(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsNonTransferable(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTAttributeRecordsByEventId(
      _eventId: BigNumberish,
      _limit: BigNumberish,
      _offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTHoldersByEvent(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTHoldersByEventGroup(
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingNFTCount(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIdsByEvent(
      eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensOfOwner(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _trustedForwarder: string,
      _secretPhraseVerifierAddr: string,
      _operationControllerAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isHoldingEventNFTByAddress(
      _addr: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintParticipateNFT(
      _groupId: BigNumberish,
      _eventId: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOfTokens(
      _tokenIdArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetSecretPhrase(
      _eventId: BigNumberish,
      _secretPhrase: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEventInfo(
      _eventId: BigNumberish,
      _mintLimit: BigNumberish,
      _secretPhrase: BytesLike,
      attributes: {
        metaDataURL: string;
        requiredParticipateCount: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEventManagerAddr(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canMint(
      _eventId: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeMintLocked(
      _eventId: BigNumberish,
      _locked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeNonTransferable(
      _eventId: BigNumberish,
      _isNonTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dropNFTs(
      _eventId: BigNumberish,
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventIdOfTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGroupIdByEvent(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsMintLocked(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsNonTransferable(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTAttributeRecordsByEventId(
      _eventId: BigNumberish,
      _limit: BigNumberish,
      _offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTHoldersByEvent(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTHoldersByEventGroup(
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingNFTCount(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenIdsByEvent(
      eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensOfOwner(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _trustedForwarder: string,
      _secretPhraseVerifierAddr: string,
      _operationControllerAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHoldingEventNFTByAddress(
      _addr: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintParticipateNFT(
      _groupId: BigNumberish,
      _eventId: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOfTokens(
      _tokenIdArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetSecretPhrase(
      _eventId: BigNumberish,
      _secretPhrase: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEventInfo(
      _eventId: BigNumberish,
      _mintLimit: BigNumberish,
      _secretPhrase: BytesLike,
      attributes: {
        metaDataURL: string;
        requiredParticipateCount: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEventManagerAddr(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
